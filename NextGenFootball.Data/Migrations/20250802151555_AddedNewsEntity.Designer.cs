// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextGenFootball.Data;

#nullable disable

namespace NextGenFootball.Data.Migrations
{
    [DbContext(typeof(NextGenFootballDbContext))]
    [Migration("20250802151555_AddedNewsEntity")]
    partial class AddedNewsEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the coach.");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the application user associated with the coach.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the coach.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image of the coach");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag indicating if the coach is deleted.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the coach.");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the coach.");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("Role of the coach, e.g., 'Head Coach', 'Assistant Coach'.");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the team that the coach manages.");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Coaches", t =>
                        {
                            t.HasComment("Represents a football coach.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the league.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Age group of the league, e.g., 'U19'.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the league.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the league's image.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the league, e.g., 'A PFG'.");

                    b.Property<int>("Region")
                        .HasColumnType("int")
                        .HasComment("Region of the league, e.g., 'Североизточна България'.");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("Corresponging season of the league.");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Leagues", t =>
                        {
                            t.HasComment("Represents a football league.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroup = "U15",
                            Description = "",
                            ImageUrl = "https://marketplace.canva.com/EAGFNmKiY9s/1/0/1600w/canva-blue-soccer-sports-logo-rQrjayPQsF0.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 15 г.",
                            Region = 5,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeGroup = "U16",
                            Description = "",
                            ImageUrl = "https://i.pinimg.com/736x/d4/c7/65/d4c765fb353b3901676a1bdbda3f9706.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 16г.",
                            Region = 5,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 3,
                            AgeGroup = "U17",
                            Description = "",
                            ImageUrl = "https://img.freepik.com/premium-vector/ball-with-three-spotting-stripe-football-league-logo_8296-13.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 17г.",
                            Region = 5,
                            SeasonId = 1
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key for the match.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AssistantReferee1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssistantReferee2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int")
                        .HasComment("The score of the away team. Null if not played yet.");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int")
                        .HasComment("The ID of the away team.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the match is scheduled.");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int")
                        .HasComment("The score of the home team. Null if not played yet.");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasComment("The ID of the home team.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the match is soft-deleted.");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasComment("The ID of the league to which this match belongs.");

                    b.Property<Guid?>("MatchReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RefereeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasComment("The ID of the stadium where the match is played.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("The current status of the match (e.g., Scheduled, Finished, etc.).");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Optional video URL for match highlights or full match.");

                    b.HasKey("Id");

                    b.HasIndex("AssistantReferee1Id");

                    b.HasIndex("AssistantReferee2Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches", t =>
                        {
                            t.HasComment("Represents a football match between two teams.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Half")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchReportId");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchReports");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PositionEnum")
                        .HasColumnType("int");

                    b.Property<int>("PreferredFoot")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0415484-d6c7-4810-8c8c-7efc69d0ae9d"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1990, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gustavo",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/136574-1624290491.png?lm=1",
                            IsDeleted = false,
                            LastName = "Busatto",
                            MinutesPlayed = 0,
                            Position = "Goalkeeper",
                            PositionEnum = 1,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("2e0b3b97-c5a0-4336-ae22-ef17a87c2843"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2001, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dimitar",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/198418-1624290529.png?lm=1",
                            IsDeleted = false,
                            LastName = "Evtimov",
                            MinutesPlayed = 0,
                            Position = "Goalkeeper",
                            PositionEnum = 1,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("3694f527-8277-4e09-b861-ba8276910273"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1999, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ivan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/550466-1624290844.png?lm=1",
                            IsDeleted = false,
                            LastName = "Turitsov",
                            MinutesPlayed = 0,
                            Position = "Right Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("fea3badc-0c3e-4249-9272-a54e3ed4b2ff"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1993, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Thibaut",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/188501-1624290803.png?lm=1",
                            IsDeleted = false,
                            LastName = "Vion",
                            MinutesPlayed = 0,
                            Position = "Left Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("a2fb3e65-e3f4-4348-8335-5f4667e83c22"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1993, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jurgen",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/188660-1624290573.png?lm=1",
                            IsDeleted = false,
                            LastName = "Mattheij",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("56b3ff5e-7fde-49a8-99da-dc76833396b3"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1999, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brian",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/585356-1689009993.png?lm=1",
                            IsDeleted = false,
                            LastName = "Cordoba",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("9778c700-13ec-4cec-8e08-daa9577cea67"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1992, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Amos",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/203540-1624292062.png?lm=1",
                            IsDeleted = false,
                            LastName = "Youga",
                            MinutesPlayed = 0,
                            Position = "Defensive Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("0efa81c3-9bd7-49a1-a5ce-8afd283a6c6e"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2002, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stanislav",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/486813-1691069350.png?lm=1",
                            IsDeleted = false,
                            LastName = "Shopov",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 3,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("5a8967a3-0261-42a0-9841-16e52732f934"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jonathan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/234345-1691069138.png?lm=1",
                            IsDeleted = false,
                            LastName = "Lindseth",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("1f4fb01d-52e7-4639-84b8-74107835f401"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1998, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Tobias",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/329714-1691069272.png?lm=1",
                            IsDeleted = false,
                            LastName = "Heintz",
                            MinutesPlayed = 0,
                            Position = "Right Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("f70355d9-0782-48f8-bd22-81d0fc9d8608"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1994, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Duckens",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/345763-1712923993.png?lm=1",
                            IsDeleted = false,
                            LastName = "Nazon",
                            MinutesPlayed = 0,
                            Position = "Center Forward",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("3457b59a-8393-4d6d-b80f-08d471fcfe94"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michael",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/265481-1718722697.jpg?lm=1",
                            IsDeleted = false,
                            LastName = "Estrada",
                            MinutesPlayed = 0,
                            Position = "Left Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("49db4761-2849-4877-a4a5-05df5a94700e"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Enes",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/329055-1689009945.png?lm=1",
                            IsDeleted = false,
                            LastName = "Mahmutovic",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("5ccd8183-2055-40bb-bd2f-5f75f09521e9"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lazar",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/257466-1735137816.png?lm=1",
                            IsDeleted = false,
                            LastName = "Tufegdzic",
                            MinutesPlayed = 0,
                            Position = "Central Attacking Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("19f2b08f-953f-4726-8406-f2df5f3ccfab"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1994, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Menno",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/182578-1624290727.png?lm=1",
                            IsDeleted = false,
                            LastName = "Koch",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("8417ad24-60cd-45d3-bfc8-c5503d544361"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1998, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brayan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/778476-1708593480.png?lm=1",
                            IsDeleted = false,
                            LastName = "Moreno",
                            MinutesPlayed = 0,
                            Position = "Left Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("f0435b87-ff3b-4cca-af13-f12e0b6a01eb"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1999, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marcelino",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/572043-1691069387.png?lm=1",
                            IsDeleted = false,
                            LastName = "Carreazo",
                            MinutesPlayed = 0,
                            Position = "Right Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("24f78ede-17ac-4851-a123-89d68ac6653e"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1990, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sergio",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/79573-1753810372.png?lm=1",
                            IsDeleted = false,
                            LastName = "Padt",
                            MinutesPlayed = 0,
                            Position = "Goalkeeper",
                            PositionEnum = 1,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("258909b8-0a3a-40b9-ac3a-6949d29f02f5"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1993, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Anton",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/218441-1753810308.png?lm=1",
                            IsDeleted = false,
                            LastName = "Nedyalkov",
                            MinutesPlayed = 0,
                            Position = "Left Back",
                            PositionEnum = 2,
                            PreferredFoot = 1,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("aec3888f-733b-43c3-8e0b-626b187dee5d"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Igor",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/97335-1629575683.png?lm=1",
                            IsDeleted = false,
                            LastName = "Plastun",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("1fe6c1e4-2556-4cb3-ba89-5772044fff00"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1995, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivier",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/504125-1753810743.png?lm=1",
                            IsDeleted = false,
                            LastName = "Verdon",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("68de397d-1790-4e81-ab59-84540ac236f9"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2000, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dominik",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/541287-1740597154.jpg?lm=1",
                            IsDeleted = false,
                            LastName = "Yankov",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("fa7a6506-2085-4d01-9182-a49e98b576c7"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jakub",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/377243-1691005537.png?lm=1",
                            IsDeleted = false,
                            LastName = "Piotrowski",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("3cbb83f0-81a8-4d20-bfd2-73a299d0099b"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1994, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Claude",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/280178-1721812558.png?lm=1",
                            IsDeleted = false,
                            LastName = "Gonçalves",
                            MinutesPlayed = 0,
                            Position = "Defensive Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("6f4757c6-e5ee-4560-a659-1246b05e49ee"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kiril",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/221540-1727967569.png?lm=1",
                            IsDeleted = false,
                            LastName = "Despodov",
                            MinutesPlayed = 0,
                            Position = "Right Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("539dab57-92ec-4899-9e3b-dfdf97295edc"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bernard",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/422380-1720984240.png?lm=1",
                            IsDeleted = false,
                            LastName = "Tekpetey",
                            MinutesPlayed = 0,
                            Position = "Left Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("3a90db90-008e-4a70-8421-5d1461558bc9"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1995, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Rick",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/645955-1720984771.png?lm=1",
                            IsDeleted = false,
                            LastName = "Lourenço",
                            MinutesPlayed = 0,
                            Position = "Right Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("995f9627-2d72-4ac7-b478-10807a1145f1"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Matías",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/503001-1720984447.png?lm=1",
                            IsDeleted = false,
                            LastName = "Tissera",
                            MinutesPlayed = 0,
                            Position = "Center Forward",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("f74653ea-0c60-4a4d-b798-f5d780ff562e"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1994, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dinis",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/329519-1753810578.png?lm=1",
                            IsDeleted = false,
                            LastName = "Almeida",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("d0ba924f-2939-40fa-ae29-f611309f9f0a"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2000, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Filip",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/396230-1753810681.png?lm=1",
                            IsDeleted = false,
                            LastName = "Kaloc",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("0a2250ba-fd8f-4231-8663-3ae38f96cbc7"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2001, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Rwan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/973569-1691005715.png?lm=1",
                            IsDeleted = false,
                            LastName = "Seco",
                            MinutesPlayed = 0,
                            Position = "Center Forward",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("85b7e6a3-54a3-4530-80a8-b91aa1b5b166"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Aslak",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/313944-1691003407.png?lm=1",
                            IsDeleted = false,
                            LastName = "Fonn Witry",
                            MinutesPlayed = 0,
                            Position = "Right Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("e3f774bc-8018-4aef-922d-b74bb43cc6cd"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2002, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Svetoslav",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/628038-1754077358.png?lm=1",
                            IsDeleted = false,
                            LastName = "Vutsov",
                            MinutesPlayed = 0,
                            Position = "Goalkeeper",
                            PositionEnum = 1,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("a034c70b-5dcb-4e27-9acd-5f2d7134a06c"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kristian",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/351800-1754077260.png?lm=1",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 1,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("12f3e458-05e4-4f30-9c19-2ac67fbcc4d7"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2000, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christian",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/463667-1754077287.png?lm=1",
                            IsDeleted = false,
                            LastName = "Makoun",
                            MinutesPlayed = 0,
                            Position = "Center Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("e8060642-8ceb-42b6-95af-d851c0f220b2"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1998, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jeremy",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/532858-1688876742.png?lm=1",
                            IsDeleted = false,
                            LastName = "Petris",
                            MinutesPlayed = 0,
                            Position = "Right Back",
                            PositionEnum = 2,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("7e46edaa-6e3a-46f8-9056-ccaee1774c6c"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Welton",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/858213-1680124417.png?lm=1",
                            IsDeleted = false,
                            LastName = "Felix",
                            MinutesPlayed = 0,
                            Position = "Left Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("4d2554c9-1f25-4243-aef0-318ce220efbc"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1999, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Andrian",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/820371-1680122620.png?lm=1",
                            IsDeleted = false,
                            LastName = "Kraev",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("f7fecf7c-38f1-4864-be64-cafd57e1c715"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1999, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Iliyan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/310144-1680123802.png?lm=1",
                            IsDeleted = false,
                            LastName = "Stefanov",
                            MinutesPlayed = 0,
                            Position = "Attacking Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("8cb114c8-6038-4f83-8041-0dd3ac6af293"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2000, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ronaldo",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/328758-1733317063.jpg?lm=1",
                            IsDeleted = false,
                            LastName = "Henrique",
                            MinutesPlayed = 0,
                            Position = "Right Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("9b452ea7-95b7-40c6-9b77-0cf0daad83ce"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2001, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Filip",
                            Goals = 0,
                            ImageUrl = "https://cdn.soccerwiki.org/images/player/104559.png",
                            IsDeleted = false,
                            LastName = "Krastev",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("ed18eeab-318b-42b7-9754-05c18bca3318"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1993, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Carlos",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/239998-1754075190.png?lm=1",
                            IsDeleted = false,
                            LastName = "Ohene",
                            MinutesPlayed = 0,
                            Position = "Center Forward",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("2687a4ec-a2ba-4e9a-a7ae-821fc4c98de4"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1992, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Georgi",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/134158-1732263336.png?lm=1",
                            IsDeleted = false,
                            LastName = "Milanov",
                            MinutesPlayed = 0,
                            Position = "Central Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("d5604c3f-3391-4198-af48-56160482d42d"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1998, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Darlan",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/570582-1691301973.png?lm=1",
                            IsDeleted = false,
                            LastName = "Cruz",
                            MinutesPlayed = 0,
                            Position = "Defensive Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("aa6607cc-70df-40e0-921b-b65354175778"),
                            Assists = 0,
                            DateOfBirth = new DateTime(2003, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marin",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/675946-1754077435.png?lm=1",
                            IsDeleted = false,
                            LastName = "Petkov",
                            MinutesPlayed = 0,
                            Position = "Right Winger",
                            PositionEnum = 4,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("ae635af1-16f3-4e4d-91be-ffbaf359a4f8"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1988, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nikolay",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/24480-1681658070.png?lm=1",
                            IsDeleted = false,
                            LastName = "Mihaylov",
                            MinutesPlayed = 0,
                            Position = "Goalkeeper",
                            PositionEnum = 1,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = new Guid("a916a6e8-fe05-4d6f-b0e4-967c07d74ff6"),
                            Assists = 0,
                            DateOfBirth = new DateTime(1990, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Georgi",
                            Goals = 0,
                            ImageUrl = "https://img.a.transfermarkt.technology/portrait/header/198816-1754075148.png?lm=1",
                            IsDeleted = false,
                            LastName = "Kostadinov",
                            MinutesPlayed = 0,
                            Position = "Defensive Midfield",
                            PositionEnum = 3,
                            PreferredFoot = 2,
                            RedCards = 0,
                            SeasonId = 1,
                            TeamId = 3,
                            YellowCards = 0
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the referee");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the application user associated with the coach.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email of the referee.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the referee");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image URL of the referee.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the referee is deleted.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the referee");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the referee.");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Referees", t =>
                        {
                            t.HasComment("Represents a referee in the football management system.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the season.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of the season.");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the season is the current one.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the season, e.g., '2023/2024'.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of the season.");

                    b.HasKey("Id");

                    b.ToTable("Seasons", t =>
                        {
                            t.HasComment("Represents a football season.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2026, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = true,
                            IsDeleted = false,
                            Name = "2025/2026",
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2027, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = false,
                            IsDeleted = false,
                            Name = "2026/2027",
                            StartDate = new DateTime(2026, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2028, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = false,
                            IsDeleted = false,
                            Name = "2027/2028",
                            StartDate = new DateTime(2027, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the stadium.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Location address of the stadium.");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("Maximum amount of people that can visit the stadium.");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the stadium");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Representing photo of the stadium.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the stadium is active or not(soft delete)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the stadium.");

                    b.Property<int>("Surface")
                        .HasColumnType("int")
                        .HasComment("Type of surface the stadium has, e.g., Grass, Artificial, Hybrid, etc.");

                    b.HasKey("Id");

                    b.ToTable("Stadiums", t =>
                        {
                            t.HasComment("Represents a stadium where matches are played.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "38, Evlogi and Hristo Georgiev Blvd., Sofia, Bulgaria",
                            Capacity = 44000,
                            Description = "National stadium located in Sofia.",
                            ImageUrl = "https://visitsofia.bg/images/vegas_media/category30000/object1137/bc9eda16929341c44a00f67d99a530c1.jpg",
                            IsDeleted = false,
                            Name = "Vasil Levski National Stadium",
                            Surface = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "43 Vasil Levski Blvd., Razgrad, 7200, Bulgaria",
                            Capacity = 10222,
                            Description = "Home of Ludogorets Razgrad.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzvhxZ44u7BOCWfpkzkPiLGH-Qas9boXXs1w&s",
                            IsDeleted = false,
                            Name = "Ludogorets Arena",
                            Surface = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "47 Todorini Kukli Str., Sofia",
                            Capacity = 25000,
                            Description = "Levski Sofia's stadium.",
                            ImageUrl = "https://sportenkalendar.bg/uploads/pages/stadion-georgi-asparuhov-639798c914d0a486224316.jpg",
                            IsDeleted = false,
                            Name = "Stadion Georgi Asparuhov",
                            Surface = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "ul. \"Beroe\" 10, 6000 Mitropolit Metodiy Kusev, Stara Zagora, Bulgaria",
                            Capacity = 12000,
                            Description = "Located in Stara Zagora.",
                            ImageUrl = "https://media.bgclubs.eu/images/stadiums/112/thumbnails/d6ae5e07b3c651e3e701cda939794851.jpg",
                            IsDeleted = false,
                            Name = "Stadion Beroe",
                            Surface = 0
                        },
                        new
                        {
                            Id = 5,
                            Address = "Hristo Botev 10 Iztochen Blvd 4017 Plovdiv ",
                            Capacity = 18000,
                            Description = "Home of Botev Plovdiv.",
                            ImageUrl = "https://pimkbuild.bg/wp-content/uploads/2023/07/stadion-3.jpg",
                            IsDeleted = false,
                            Name = "Stadion Hristo Botev",
                            Surface = 0
                        },
                        new
                        {
                            Id = 6,
                            Address = "Lokomotiv Trakia Stadium",
                            Capacity = 13500,
                            Description = "Lokomotiv Plovdiv stadium.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/7/7d/Lokomotiv_Stadium_2022.jpg",
                            IsDeleted = false,
                            Name = "Stadion Lokomotiv",
                            Surface = 0
                        },
                        new
                        {
                            Id = 7,
                            Address = "2 Ivaylo St, 5000 Veliko Tarnovo",
                            Capacity = 18000,
                            Description = "Located in Veliko Tarnovo.",
                            ImageUrl = "Stadium Ivaylo Veliko Tarnovo",
                            IsDeleted = false,
                            Name = "Stadion Ivaylo",
                            Surface = 0
                        },
                        new
                        {
                            Id = 8,
                            Address = "1 Koloman Str., Krasno selo",
                            Capacity = 25000,
                            Description = "Home of Slavia Sofia.",
                            ImageUrl = "https://static.bnr.bg/gallery/cr/medium/4161fc0a6d52093f9345b9b7bbe11457.JPG",
                            IsDeleted = false,
                            Name = "Stadion Slavia",
                            Surface = 0
                        },
                        new
                        {
                            Id = 9,
                            Address = "Ticha Stadium",
                            Capacity = 8500,
                            Description = "Cherno More Varna's stadium.",
                            ImageUrl = "https://media.bgclubs.eu/images/stadiums/110/thumbnails/f0f8d88415e703b90b7ad27fbab55f88.jpg",
                            IsDeleted = false,
                            Name = "Stadion Ticha",
                            Surface = 0
                        },
                        new
                        {
                            Id = 10,
                            Address = "Stadium \"Druzhba\"",
                            Capacity = 12000,
                            Description = "Located in Dobrich.",
                            ImageUrl = "https://pronewsdobrich.bg//i/2024/09/17/461251.jpg",
                            IsDeleted = false,
                            Name = "Stadion Druzhba",
                            Surface = 0
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the team.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Age group of the league, e.g., 'U19'.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the team.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the team's image.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag indicating if the team is deleted.");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the league in which the team participates.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the team, e.g., 'CSKA Sofia'.");

                    b.Property<int>("Region")
                        .HasColumnType("int")
                        .HasComment("Region of the team, e.g., 'Североизточна България'.");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the stadium where the team plays.");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Teams", t =>
                        {
                            t.HasComment("Represents a football team.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroup = "U15",
                            Description = "CSKA Sofia's youth team, based in Sofia.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/CSKA_Sofia_logo.svg/471px-CSKA_Sofia_logo.svg.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "CSKA Sofia U15",
                            Region = 3,
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeGroup = "U15",
                            Description = "Ludogorets Razgrad's youth team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/e/eb/PFC_Ludogorets_Razgrad_logo.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Ludogorets Razgrad U15",
                            Region = 1,
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgeGroup = "U15",
                            Description = "Levski Sofia's U15 team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/5/51/PFC_Levski_Sofia.svg",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Levski Sofia U15",
                            Region = 3,
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgeGroup = "U15",
                            Description = "Beroe Stara Zagora's U15 team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/d/df/BeroeLogo.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Beroe Stara Zagora U15",
                            Region = 4,
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 5,
                            AgeGroup = "U15",
                            Description = "Botev Plovdiv's youth team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/thumb/8/87/PFC_Botev_Plovdiv.svg/640px-PFC_Botev_Plovdiv.svg.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Botev Plovdiv U15",
                            Region = 4,
                            StadiumId = 5
                        },
                        new
                        {
                            Id = 6,
                            AgeGroup = "U15",
                            Description = "Lokomotiv Plovdiv's U15 squad.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/1/12/PFC_Lokomotiv_Plovdiv.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Lokomotiv Plovdiv U15",
                            Region = 4,
                            StadiumId = 6
                        },
                        new
                        {
                            Id = 7,
                            AgeGroup = "U15",
                            Description = "Etar Veliko Tarnovo's U15 team.",
                            ImageUrl = "https://etarvt.bg/wp-content/uploads/2017/03/etar.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Etar Veliko Tarnovo U15",
                            Region = 2,
                            StadiumId = 7
                        },
                        new
                        {
                            Id = 8,
                            AgeGroup = "U15",
                            Description = "Slavia Sofia's U15 team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/a/a3/Slavia-Sofia.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Slavia Sofia U15",
                            Region = 3,
                            StadiumId = 8
                        },
                        new
                        {
                            Id = 9,
                            AgeGroup = "U15",
                            Description = "Cherno More Varna U15 squad.",
                            ImageUrl = "https://seeklogo.com/images/F/fk-cherno-more-varna-logo-FF1CA3BA17-seeklogo.com.gif",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Cherno More Varna U15",
                            Region = 1,
                            StadiumId = 9
                        },
                        new
                        {
                            Id = 10,
                            AgeGroup = "U15",
                            Description = "Dobrudzha Dobrich U15 youth team.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/0/09/FC_Dobrudzha_Dobrich_2018_emblem.png",
                            IsDeleted = false,
                            LeagueId = 1,
                            Name = "Dobrudzha Dobrich U15",
                            Region = 1,
                            StadiumId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Coach", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Coaches")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Season", "Season")
                        .WithMany("Leagues")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Referee", "AssistantReferee1")
                        .WithMany("AssistantReferee1Matches")
                        .HasForeignKey("AssistantReferee1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Referee", "AssistantReferee2")
                        .WithMany("AssistantReferee2Matches")
                        .HasForeignKey("AssistantReferee2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Referee", "Referee")
                        .WithMany("MainRefereeMatches")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssistantReferee1");

                    b.Navigation("AssistantReferee2");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Referee");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchEvent", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.MatchReport", "MatchReport")
                        .WithMany("Events")
                        .HasForeignKey("MatchReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchReport");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Match", "Match")
                        .WithOne("Report")
                        .HasForeignKey("NextGenFootball.Data.Models.MatchReport", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Player", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Players")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Season", "Season")
                        .WithMany("Players")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Referees")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Stadium", "Stadium")
                        .WithMany("Teams")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("Referees");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.Navigation("AssistantReferee1Matches");

                    b.Navigation("AssistantReferee2Matches");

                    b.Navigation("MainRefereeMatches");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Season", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Stadium", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("Coaches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
