// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextGenFootball.Data;

#nullable disable

namespace NextGenFootball.Data.Migrations
{
    [DbContext(typeof(NextGenFootballDbContext))]
    [Migration("20250801133146_SeedLeagues")]
    partial class SeedLeagues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the coach.");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the application user associated with the coach.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the coach.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image of the coach");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag indicating if the coach is deleted.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the coach.");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the coach.");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("Role of the coach, e.g., 'Head Coach', 'Assistant Coach'.");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the team that the coach manages.");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Coaches", t =>
                        {
                            t.HasComment("Represents a football coach.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the league.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Age group of the league, e.g., 'U19'.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the league.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the league's image.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the league, e.g., 'A PFG'.");

                    b.Property<int>("Region")
                        .HasColumnType("int")
                        .HasComment("Region of the league, e.g., 'Североизточна България'.");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("Corresponging season of the league.");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Leagues", t =>
                        {
                            t.HasComment("Represents a football league.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroup = "U15",
                            Description = "",
                            ImageUrl = "https://marketplace.canva.com/EAGFNmKiY9s/1/0/1600w/canva-blue-soccer-sports-logo-rQrjayPQsF0.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 15 г.",
                            Region = 5,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeGroup = "U16",
                            Description = "",
                            ImageUrl = "https://i.pinimg.com/736x/d4/c7/65/d4c765fb353b3901676a1bdbda3f9706.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 16г.",
                            Region = 5,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 3,
                            AgeGroup = "U17",
                            Description = "",
                            ImageUrl = "https://img.freepik.com/premium-vector/ball-with-three-spotting-stripe-football-league-logo_8296-13.jpg",
                            IsDeleted = false,
                            Name = "Елитна юношеска група до 17г.",
                            Region = 5,
                            SeasonId = 1
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key for the match.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AssistantReferee1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssistantReferee2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int")
                        .HasComment("The score of the away team. Null if not played yet.");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int")
                        .HasComment("The ID of the away team.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the match is scheduled.");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int")
                        .HasComment("The score of the home team. Null if not played yet.");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasComment("The ID of the home team.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the match is soft-deleted.");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasComment("The ID of the league to which this match belongs.");

                    b.Property<Guid?>("MatchReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RefereeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasComment("The ID of the stadium where the match is played.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("The current status of the match (e.g., Scheduled, Finished, etc.).");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Optional video URL for match highlights or full match.");

                    b.HasKey("Id");

                    b.HasIndex("AssistantReferee1Id");

                    b.HasIndex("AssistantReferee2Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches", t =>
                        {
                            t.HasComment("Represents a football match between two teams.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Half")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchReportId");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchReports");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PreferredFoot")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the referee");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the application user associated with the coach.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email of the referee.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the referee");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image URL of the referee.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the referee is deleted.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the referee");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the referee.");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Referees", t =>
                        {
                            t.HasComment("Represents a referee in the football management system.");
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the season.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of the season.");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the season is the current one.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the season, e.g., '2023/2024'.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of the season.");

                    b.HasKey("Id");

                    b.ToTable("Seasons", t =>
                        {
                            t.HasComment("Represents a football season.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2026, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = true,
                            IsDeleted = false,
                            Name = "2025/2026",
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2027, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = false,
                            IsDeleted = false,
                            Name = "2026/2027",
                            StartDate = new DateTime(2026, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2028, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrent = false,
                            IsDeleted = false,
                            Name = "2027/2028",
                            StartDate = new DateTime(2027, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the stadium.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Location address of the stadium.");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("Maximum amount of people that can visit the stadium.");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the stadium");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Representing photo of the stadium.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the stadium is active or not(soft delete)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the stadium.");

                    b.Property<int>("Surface")
                        .HasColumnType("int")
                        .HasComment("Type of surface the stadium has, e.g., Grass, Artificial, Hybrid, etc.");

                    b.HasKey("Id");

                    b.ToTable("Stadiums", t =>
                        {
                            t.HasComment("Represents a stadium where matches are played.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "38, Evlogi and Hristo Georgiev Blvd., Sofia, Bulgaria",
                            Capacity = 44000,
                            Description = "National stadium located in Sofia.",
                            ImageUrl = "https://visitsofia.bg/images/vegas_media/category30000/object1137/bc9eda16929341c44a00f67d99a530c1.jpg",
                            IsDeleted = false,
                            Name = "Vasil Levski National Stadium",
                            Surface = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "43 Vasil Levski Blvd., Razgrad, 7200, Bulgaria",
                            Capacity = 10222,
                            Description = "Home of Ludogorets Razgrad.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzvhxZ44u7BOCWfpkzkPiLGH-Qas9boXXs1w&s",
                            IsDeleted = false,
                            Name = "Ludogorets Arena",
                            Surface = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "47 Todorini Kukli Str., Sofia",
                            Capacity = 25000,
                            Description = "Levski Sofia's stadium.",
                            ImageUrl = "https://sportenkalendar.bg/uploads/pages/stadion-georgi-asparuhov-639798c914d0a486224316.jpg",
                            IsDeleted = false,
                            Name = "Stadion Georgi Asparuhov",
                            Surface = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "ul. \"Beroe\" 10, 6000 Mitropolit Metodiy Kusev, Stara Zagora, Bulgaria",
                            Capacity = 12000,
                            Description = "Located in Stara Zagora.",
                            ImageUrl = "https://media.bgclubs.eu/images/stadiums/112/thumbnails/d6ae5e07b3c651e3e701cda939794851.jpg",
                            IsDeleted = false,
                            Name = "Stadion Beroe",
                            Surface = 0
                        },
                        new
                        {
                            Id = 5,
                            Address = "Hristo Botev 10 Iztochen Blvd 4017 Plovdiv ",
                            Capacity = 18000,
                            Description = "Home of Botev Plovdiv.",
                            ImageUrl = "https://pimkbuild.bg/wp-content/uploads/2023/07/stadion-3.jpg",
                            IsDeleted = false,
                            Name = "Stadion Hristo Botev",
                            Surface = 0
                        },
                        new
                        {
                            Id = 6,
                            Address = "Lokomotiv Trakia Stadium",
                            Capacity = 13500,
                            Description = "Lokomotiv Plovdiv stadium.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/7/7d/Lokomotiv_Stadium_2022.jpg",
                            IsDeleted = false,
                            Name = "Stadion Lokomotiv",
                            Surface = 0
                        },
                        new
                        {
                            Id = 7,
                            Address = "2 Ivaylo St, 5000 Veliko Tarnovo",
                            Capacity = 18000,
                            Description = "Located in Veliko Tarnovo.",
                            ImageUrl = "Stadium Ivaylo Veliko Tarnovo",
                            IsDeleted = false,
                            Name = "Stadion Ivaylo",
                            Surface = 0
                        },
                        new
                        {
                            Id = 8,
                            Address = "1 Koloman Str., Krasno selo",
                            Capacity = 25000,
                            Description = "Home of Slavia Sofia.",
                            ImageUrl = "https://static.bnr.bg/gallery/cr/medium/4161fc0a6d52093f9345b9b7bbe11457.JPG",
                            IsDeleted = false,
                            Name = "Stadion Slavia",
                            Surface = 0
                        },
                        new
                        {
                            Id = 9,
                            Address = "Ticha Stadium",
                            Capacity = 8500,
                            Description = "Cherno More Varna's stadium.",
                            ImageUrl = "https://media.bgclubs.eu/images/stadiums/110/thumbnails/f0f8d88415e703b90b7ad27fbab55f88.jpg",
                            IsDeleted = false,
                            Name = "Stadion Ticha",
                            Surface = 0
                        },
                        new
                        {
                            Id = 10,
                            Address = "Stadium \"Druzhba\"",
                            Capacity = 12000,
                            Description = "Located in Dobrich.",
                            ImageUrl = "https://pronewsdobrich.bg//i/2024/09/17/461251.jpg",
                            IsDeleted = false,
                            Name = "Stadion Druzhba",
                            Surface = 0
                        });
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the team.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Age group of the league, e.g., 'U19'.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the team.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the team's image.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag indicating if the team is deleted.");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the league in which the team participates.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the team, e.g., 'CSKA Sofia'.");

                    b.Property<int>("Region")
                        .HasColumnType("int")
                        .HasComment("Region of the team, e.g., 'Североизточна България'.");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the stadium where the team plays.");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Teams", t =>
                        {
                            t.HasComment("Represents a football team.");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Coach", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Coaches")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Season", "Season")
                        .WithMany("Leagues")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Referee", "AssistantReferee1")
                        .WithMany("AssistantReferee1Matches")
                        .HasForeignKey("AssistantReferee1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Referee", "AssistantReferee2")
                        .WithMany("AssistantReferee2Matches")
                        .HasForeignKey("AssistantReferee2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Referee", "Referee")
                        .WithMany("MainRefereeMatches")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssistantReferee1");

                    b.Navigation("AssistantReferee2");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Referee");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchEvent", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.MatchReport", "MatchReport")
                        .WithMany("Events")
                        .HasForeignKey("MatchReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchReport");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.Match", "Match")
                        .WithOne("Report")
                        .HasForeignKey("NextGenFootball.Data.Models.MatchReport", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Player", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Players")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextGenFootball.Data.Models.Season", "Season")
                        .WithMany("Players")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Referees")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.HasOne("NextGenFootball.Data.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextGenFootball.Data.Models.Stadium", "Stadium")
                        .WithMany("Teams")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("Referees");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.League", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Match", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.MatchReport", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Referee", b =>
                {
                    b.Navigation("AssistantReferee1Matches");

                    b.Navigation("AssistantReferee2Matches");

                    b.Navigation("MainRefereeMatches");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Season", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Stadium", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("NextGenFootball.Data.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("Coaches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
